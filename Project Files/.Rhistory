library(ggplot2)
library(dplyr)
library(statsr)
library(gridExtra)
library(GGally)
library(car)
load("movies.Rdata")
str(movies)
# Removing all NA rows
movies <- na.omit(movies)
length(unique(movies$studio))
length(unique(movies$director))
length(unique(movies$actor1))
length(unique(movies$actor2))
length(unique(movies$actor3))
length(unique(movies$actor4))
length(unique(movies$actor5))
p1 <- ggplot(movies, aes(x=title_type, y=imdb_num_votes, fill=title_type)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
p2 <- ggplot(movies, aes(x=mpaa_rating, y=imdb_num_votes, fill=mpaa_rating)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
grid.arrange(p1, p2, nrow = 1, ncol = 2, top="Distribution of IMDb voter count for different title types and mpaa ratings")
ggplot(movies, aes(x=genre, y=imdb_num_votes, fill=genre)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
ggtitle("Distribution of IMDb voter count for different genres") +
coord_flip()
p1 <- ggplot(movies, aes(x=factor(thtr_rel_year), y=imdb_num_votes), fill=factor(thtr_rel_year)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
p2 <- ggplot(movies, aes(x=factor(dvd_rel_year), y=imdb_num_votes), fill=factor(dvd_rel_year)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
p3 <- ggplot(movies, aes(x=factor(thtr_rel_month), y=imdb_num_votes), fill=factor(thtr_rel_month)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
p4 <- ggplot(movies, aes(x=factor(dvd_rel_month), y=imdb_num_votes), fill=factor(dvd_rel_month)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
p5 <- ggplot(movies, aes(x=factor(thtr_rel_day), y=imdb_num_votes), fill=factor(thtr_rel_day)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
p6<- ggplot(movies, aes(x=factor(dvd_rel_day), y=imdb_num_votes), fill=factor(dvd_rel_day)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
coord_flip()
grid.arrange(p1, p2, p3, p4, p5, p6, nrow = 3, ncol = 2, top="Distribution of IMDb voter count across DVD and theatre release time")
ggplot(movies, aes(x=top200_box, y=imdb_num_votes, fill=top200_box)) +
geom_boxplot(alpha=0.3) +
ggtitle("Distribution of IMDb voter count for Top 200 highest grossing movies") +
theme(legend.position="none")
p1 <- ggplot(movies, aes(x=best_pic_nom, y=imdb_num_votes, fill=best_pic_nom)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
p2 <- ggplot(movies, aes(x=best_pic_win, y=imdb_num_votes, fill=best_pic_win)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
p3 <- ggplot(movies, aes(x=best_actor_win, y=imdb_num_votes, fill=best_actor_win)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
p4 <- ggplot(movies, aes(x=best_actress_win, y=imdb_num_votes, fill=best_actress_win)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
p5 <- ggplot(movies, aes(x=best_dir_win, y=imdb_num_votes, fill=best_dir_win)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
grid.arrange(p1, p2, p3, p4, p5, nrow = 1, ncol = 5, top="Distribution of IMDb voter count for different oscar wins")
p1 <- ggplot(movies, aes(x=critics_score, y=imdb_num_votes)) +
geom_point()
p2 <- ggplot(movies, aes(x=audience_score, y=imdb_num_votes)) +
geom_point()
p3 <- ggplot(movies, aes(x=imdb_rating, y=imdb_num_votes)) +
geom_point()
grid.arrange(p1, p2, p3, nrow = 1, ncol = 3, top="Distribution of IMDb voter count for scores and ratings")
#everything is used for covariances with missing values.
#Pearson is used for indicating corr coefficient
ggcorr(movies, method = c("everything", "pearson"),label=TRUE)
movies2 <- movies %>%
select(title_type,genre,runtime,mpaa_rating,top200_box,thtr_rel_year,imdb_rating,imdb_num_votes,best_pic_nom,best_pic_win,best_dir_win,thtr_rel_month,thtr_rel_day)
str(movies2)
all_feats <- lm(imdb_num_votes~title_type+genre+runtime+mpaa_rating+top200_box+thtr_rel_year+imdb_rating+best_pic_nom+best_pic_win+best_dir_win,data=movies2)
summary(all_feats)
all_feats_but_1 <- lm(imdb_num_votes~genre+runtime+mpaa_rating+top200_box+thtr_rel_year+imdb_rating+best_pic_nom+best_pic_win+best_dir_win,data=movies2)
summary(all_feats_but_1)
all_feats_but_2 <- lm(imdb_num_votes~genre+runtime+top200_box+thtr_rel_year+imdb_rating+best_pic_nom+best_pic_win+best_dir_win,data=movies2)
summary(all_feats_but_2)
all_feats_but_3 <- lm(imdb_num_votes~genre+runtime+top200_box+thtr_rel_year+imdb_rating+best_pic_nom+best_pic_win,data=movies2)
summary(all_feats_but_3)
crPlots(all_feats_but_3)
plot(all_feats_but_3$residuals ~ movies2$runtime)
abline(0,0)
plot(all_feats_but_3$residuals ~ movies2$thtr_rel_year)
abline(0,0)
plot(all_feats_but_3$residuals ~ movies2$imdb_rating)
abline(0,0)
hist(all_feats_but_3$residuals,freq=FALSE)
dens <- density(all_feats_but_3$residuals)
lines(dens)
qqnorm(all_feats_but_3$residuals)
qqline(all_feats_but_3$residuals)
plot(all_feats_but_3$residuals ~ all_feats_but_3$fitted)
abline(0,0)
ncvTest(all_feats_but_3)
durbinWatsonTest(all_feats_but_3)
new.data.point <- data.frame(genre="Comedy",runtime=109,top200_box="no",thtr_rel_year=2012,imdb_rating=7.2,best_pic_nom="no",best_pic_win="no")
predict(all_feats_but_3,new.data.point,interval="prediction",level=0.95)
